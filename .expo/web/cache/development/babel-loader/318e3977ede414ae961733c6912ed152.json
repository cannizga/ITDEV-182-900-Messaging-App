{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport Constants from 'expo-constants';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport { StatusBarStyle } from \"react-native-web/dist/index\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport * as NetInfo from \"@react-native-community/netinfo\";\nimport React from 'react';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar Status = function (_React$Component) {\n  _inherits(Status, _React$Component);\n\n  var _super = _createSuper(Status);\n\n  function Status() {\n    var _this;\n\n    _classCallCheck(this, Status);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _this.handleChange = function (info) {\n      _this.setState({\n        info: info\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(Status, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      var info;\n      return _regeneratorRuntime.async(function componentWillMount$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              this.subscription = NetInfo.addEventListener('connectionChange', this.handleChange);\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(NetInfo.getConnectionInfo());\n\n            case 3:\n              info = _context.sent;\n              this.setState({\n                info: info\n              });\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.subscription.remove();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var info = this.state.info;\n      var isConnected = info !== 'none';\n      var backgroundColor = isConnected ? 'white' : 'red';\n\n      var statusBar = _jsx(StatusBar, {\n        backgroundColor: backgroundColor,\n        barStyle: isConnected ? 'dark-content' : 'light-content',\n        animated: false\n      });\n\n      var messageContainer = _jsxs(View, {\n        style: styles.messageContainer,\n        pointerEvents: 'none',\n        children: [statusBar, !isConnected && _jsx(View, {\n          style: styles.bubble,\n          children: _jsx(Text, {\n            style: styles.text,\n            children: \"No  network  connection\"\n          })\n        })]\n      });\n\n      return messageContainer;\n    }\n  }]);\n\n  return Status;\n}(React.Component);\n\nexport { Status as default };\n\nfunction get_platform(os_name) {\n  var os_str = os_name;\n  var chk_win = os_str.substr(0, 3);\n  var platform = \"\";\n  if (chk_win == \"Win\") platform = \"win\";\n  if (chk_win == \"Lin\") platform = \"linux\";\n  if (chk_win == \"X11\") platform = \"unix\";\n  return platform;\n}\n\n;\nvar statusHeight = get_platform.os_str === 'ios' ? Constants.statusBarHeight : 0;\nvar styles = StyleSheet.create({\n  messageContainer: {\n    zIndex: 1,\n    position: 'absolute',\n    top: statusHeight + 20,\n    right: 0,\n    left: 0,\n    height: 80,\n    alignItems: 'center'\n  },\n  bubble: {\n    paddingHorizontal: 20,\n    paddingVertical: 10,\n    borderRadius: 20,\n    backgroundColor: 'red'\n  },\n  text: {\n    color: 'white'\n  }\n});","map":{"version":3,"sources":["C:/Users/joeac/source/repos/messaging/src/components/Status.js"],"names":["Constants","StatusBarStyle","NetInfo","React","Status","handleChange","info","setState","subscription","addEventListener","getConnectionInfo","remove","state","isConnected","backgroundColor","statusBar","messageContainer","styles","bubble","text","Component","get_platform","os_name","os_str","chk_win","substr","platform","statusHeight","statusBarHeight","StyleSheet","create","zIndex","position","top","right","left","height","alignItems","paddingHorizontal","paddingVertical","borderRadius","color"],"mappings":"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","sourcesContent":["import Constants from 'expo-constants';\r\nimport { Text, StatusBar, StatusBarStyle, StyleSheet, View } from 'react-native';\r\nimport * as NetInfo from \"@react-native-community/netinfo\"\r\nimport React from 'react';\r\n\r\n\r\nexport default class Status extends React.Component {\r\n    async componentWillMount() {\r\n        this.subscription = NetInfo.addEventListener('connectionChange', this.handleChange\r\n        );\r\n        const info = await NetInfo.getConnectionInfo();\r\n        this.setState({ info });\r\n    }\r\n    componentWillUnmount() {\r\n        this.subscription.remove();\r\n    }\r\n    handleChange = (info) => {\r\n        this.setState({ info });\r\n    };\r\n\r\n    render() {\r\n        const { info } = this.state;\r\n        const isConnected = info !== 'none';\r\n        const backgroundColor = isConnected ? 'white' : 'red';\r\n        const statusBar = (\r\n            <StatusBar\r\n                backgroundColor={backgroundColor}\r\n                barStyle={isConnected ? 'dark-content' : 'light-content'}\r\n                animated={false}\r\n            />\r\n        );\r\n        const messageContainer = (\r\n            <View style={styles.messageContainer} pointerEvents={'none'}>\r\n                {statusBar}\r\n                {!isConnected && (\r\n                    <View style={styles.bubble}>\r\n                        <Text style={styles.text}>No  network  connection</Text>\r\n                    </View>\r\n                )}\r\n            </View>\r\n        );\r\n        return messageContainer;\r\n    }\r\n}\r\nfunction get_platform(os_name) {\r\n    var os_str = os_name;\r\n    var chk_win = os_str.substr(0, 3);\r\n    var platform = \"\";\r\n    if (chk_win == \"Win\")\r\n        platform = \"win\";\r\n    if (chk_win == \"Lin\")\r\n        platform = \"linux\";\r\n    if (chk_win == \"X11\")\r\n        platform = \"unix\";\r\n    return platform\r\n};\r\nconst statusHeight = (get_platform.os_str === 'ios' ? Constants.statusBarHeight : 0);\r\n\r\n    const styles = StyleSheet.create({\r\n    messageContainer:  {\r\n        zIndex: 1,\r\n        position: 'absolute',\r\n        top: statusHeight + 20,\r\n        right: 0,\r\n        left: 0,\r\n        height: 80,\r\n        alignItems: 'center',\r\n    },\r\n        bubble: {\r\n        paddingHorizontal: 20,\r\n        paddingVertical: 10,\r\n        borderRadius: 20,\r\n        backgroundColor: 'red',\r\n    },\r\n        text: {\r\n        color: 'white',\r\n   },\r\n    });\r\n"]},"metadata":{},"sourceType":"module"}