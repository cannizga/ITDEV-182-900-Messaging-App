{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\joeac\\\\source\\\\repos\\\\messaging\\\\src\\\\components\\\\MessagingContainer.js\";\nimport React, { useState, useEffect, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport BackHandler from \"react-native-web/dist/exports/BackHandler\";\nimport LayoutAnimation from \"react-native-web/dist/exports/LayoutAnimation\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport UIManager from \"react-native-web/dist/exports/UIManager\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { isIphoneX } from 'react-native-iphone-x-helper';\n\nif (Platform.OS === 'android' && UIManager.setLayoutAnimationEnabledExperimental) {\n  UIManager.setLayoutAnimationEnabledExperimental(true);\n}\n\nexport var INPUT_METHOD = {\n  NONE: 'NONE',\n  KEYBOARD: 'KEYBOARD',\n  CUSTOM: 'CUSTOM'\n};\n\nvar MessagingContainer = function MessagingContainer(_ref) {\n  var containerHeight = _ref.containerHeight,\n      contentHeight = _ref.contentHeight,\n      keyboardHeight = _ref.keyboardHeight,\n      keyboardVisible = _ref.keyboardVisible,\n      keyboardWillShow = _ref.keyboardWillShow,\n      keyboardWillHide = _ref.keyboardWillHide,\n      keyboardAnimationDuration = _ref.keyboardAnimationDuration,\n      inputMethod = _ref.inputMethod,\n      onChangeInputMethod = _ref.onChangeInputMethod,\n      children = _ref.children,\n      renderInputMethodEditor = _ref.renderInputMethodEditor;\n\n  var usePrevious = function usePrevious(value) {\n    var ref = useRef();\n    useEffect(function () {\n      ref.current = value;\n    });\n    return ref.current;\n  };\n\n  var prevKeyboardVisible = usePrevious(keyboardVisible);\n  useEffect(function () {\n    if (keyboardVisible && !prevKeyboardVisible) {\n      onChangeInputMethod(INPUT_METHOD.KEYBOARD);\n    } else if (!keyboardVisible && prevKeyboardVisible && inputMethod !== INPUT_METHOD.CUSTOM) {\n      onChangeInputMethod(INPUT_METHOD.NONE);\n    }\n\n    var animation = LayoutAnimation.create(keyboardAnimationDuration, Platform.OS === 'android' ? LayoutAnimation.Types.easeInEaseOut : LayoutAnimation.Types.keyboard, LayoutAnimation.Properties.opacity);\n    LayoutAnimation.configureNext(animation);\n  }, [keyboardVisible]);\n  useEffect(function () {\n    var subscription = BackHandler.addEventListener('hardwareBackPress', function () {\n      if (inputMethod === INPUT_METHOD.CUSTOM) {\n        onChangeInputMethod(INPUT_METHOD.NONE);\n        return true;\n      }\n\n      return false;\n    });\n    return function () {\n      subscription.remove();\n    };\n  }, []);\n  var useContentHeight = keyboardWillShow || inputMethod === INPUT_METHOD.KEYBOARD;\n  var containerStyle = {\n    height: useContentHeight ? contentHeight : containerHeight\n  };\n  var showCustomInput = inputMethod === INPUT_METHOD.CUSTOM && !keyboardWillShow;\n  var keyboardIsHidden = inputMethod === INPUT_METHOD.NONE && !keyboardWillShow;\n  var keyboardIsHiding = inputMethod === INPUT_METHOD.KEYBOARD && keyboardWillHide;\n  var inputStyle = {\n    height: showCustomInput ? keyboardHeight || 250 : 0,\n    marginTop: isIphoneX() && (keyboardIsHidden || keyboardIsHiding)\n  };\n  return React.createElement(View, {\n    style: containerStyle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 3\n    }\n  }, children, React.createElement(View, {\n    style: inputStyle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 4\n    }\n  }, renderInputMethodEditor()));\n};\n\nMessagingContainer.propTypes = {\n  containerHeight: PropTypes.number.isRequired,\n  contentHeight: PropTypes.number.isRequired,\n  keyboardHeight: PropTypes.number.isRequired,\n  keyboardVisible: PropTypes.bool.isRequired,\n  keyboardWillShow: PropTypes.bool.isRequired,\n  keyboardWillHide: PropTypes.bool.isRequired,\n  keyboardAnimationDuration: PropTypes.number.isRequired,\n  inputMethod: PropTypes.oneOf(Object.values(INPUT_METHOD)).isRequired,\n  onChangeInputMethod: PropTypes.func,\n  children: PropTypes.node,\n  renderInputMethodEditor: PropTypes.func.isRequired\n};\nMessagingContainer.defaultProps = {\n  children: null,\n  onChangeInputMethod: function onChangeInputMethod() {}\n};\nMessagingContainer.displayName = 'MessagingContainer';\nexport default MessagingContainer;","map":{"version":3,"sources":["C:/Users/joeac/source/repos/messaging/src/components/MessagingContainer.js"],"names":["React","useState","useEffect","useRef","PropTypes","isIphoneX","Platform","OS","UIManager","setLayoutAnimationEnabledExperimental","INPUT_METHOD","NONE","KEYBOARD","CUSTOM","MessagingContainer","containerHeight","contentHeight","keyboardHeight","keyboardVisible","keyboardWillShow","keyboardWillHide","keyboardAnimationDuration","inputMethod","onChangeInputMethod","children","renderInputMethodEditor","usePrevious","value","ref","current","prevKeyboardVisible","animation","LayoutAnimation","create","Types","easeInEaseOut","keyboard","Properties","opacity","configureNext","subscription","BackHandler","addEventListener","remove","useContentHeight","containerStyle","height","showCustomInput","keyboardIsHidden","keyboardIsHiding","inputStyle","marginTop","propTypes","number","isRequired","bool","oneOf","Object","values","func","node","defaultProps","displayName"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {\r\n\tBackHandler,\r\n\tLayoutAnimation,\r\n\tPlatform,\r\n\tUIManager,\r\n\tView,\r\n} from 'react-native';\r\nimport { isIphoneX } from 'react-native-iphone-x-helper';\r\n\r\nif (\r\n\tPlatform.OS === 'android' &&\r\n\tUIManager.setLayoutAnimationEnabledExperimental\r\n) {\r\n\tUIManager.setLayoutAnimationEnabledExperimental(true);\r\n}\r\n\r\nexport const INPUT_METHOD = {\r\n\tNONE: 'NONE',\r\n\tKEYBOARD: 'KEYBOARD',\r\n\tCUSTOM: 'CUSTOM',\r\n};\r\n\r\nconst MessagingContainer = ({\r\n\tcontainerHeight,\r\n\tcontentHeight,\r\n\tkeyboardHeight,\r\n\tkeyboardVisible,\r\n\tkeyboardWillShow,\r\n\tkeyboardWillHide,\r\n\tkeyboardAnimationDuration,\r\n\tinputMethod,\r\n\tonChangeInputMethod,\r\n\tchildren,\r\n\trenderInputMethodEditor,\r\n}) => {\r\n\t// used to access previous value of keyboardVisible\r\n\t// in useEffect(, [keyboardVisible])\r\n\tconst usePrevious = (value) => {\r\n\t\tconst ref = useRef();\r\n\t\tuseEffect(() => {\r\n\t\t\tref.current = value;\r\n\t\t});\r\n\t\treturn ref.current;\r\n\t};\r\n\tconst prevKeyboardVisible = usePrevious(keyboardVisible);\r\n\r\n\t// update the UI when they keyboard changes visibility\r\n\tuseEffect(() => {\r\n\t\tif (keyboardVisible && !prevKeyboardVisible) {\r\n\t\t\t// keyboard shown\r\n\t\t\tonChangeInputMethod(INPUT_METHOD.KEYBOARD);\r\n\t\t} else if (\r\n\t\t\t!keyboardVisible &&\r\n\t\t\tprevKeyboardVisible &&\r\n\t\t\tinputMethod !== INPUT_METHOD.CUSTOM\r\n\t\t) {\r\n\t\t\t// keyboard hidden\r\n\t\t\tonChangeInputMethod(INPUT_METHOD.NONE);\r\n\t\t}\r\n\r\n\t\t// >>>>>> not 100% sure this goes here\r\n\t\tconst animation = LayoutAnimation.create(\r\n\t\t\tkeyboardAnimationDuration,\r\n\t\t\tPlatform.OS === 'android'\r\n\t\t\t\t? LayoutAnimation.Types.easeInEaseOut\r\n\t\t\t\t: LayoutAnimation.Types.keyboard,\r\n\t\t\tLayoutAnimation.Properties.opacity,\r\n\t\t);\r\n\r\n\t\tLayoutAnimation.configureNext(animation);\r\n\t\t// not 100% sure this goes here >>>>>>\r\n\t}, [keyboardVisible]);\r\n\r\n\t// handle the BACK button on Android\r\n\tuseEffect(() => {\r\n\t\tconst subscription = BackHandler.addEventListener(\r\n\t\t\t'hardwareBackPress',\r\n\t\t\t() => {\r\n\t\t\t\tif (inputMethod === INPUT_METHOD.CUSTOM) {\r\n\t\t\t\t\tonChangeInputMethod(INPUT_METHOD.NONE);\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn false;\r\n\t\t\t},\r\n\t\t);\r\n\r\n\t\treturn () => {\r\n\t\t\tsubscription.remove();\r\n\t\t};\r\n\t}, []);\r\n\r\n\t// For our outer `View`, we want to choose between rendering at\r\n\t// full height (`containerHeight`) or only the height above the\r\n\t// keyboard (`contentHeight`). If the keyboard is currently\r\n\t// appearing (`keyboardWillShow` is `true`) or if it's fully\r\n\t// visible (`inputMethod === INPUT_METHOD.KEYBOARD`), we should\r\n\t// use `contentHeight`.\r\n\tconst useContentHeight =\r\n\t\tkeyboardWillShow || inputMethod === INPUT_METHOD.KEYBOARD;\r\n\tconst containerStyle = {\r\n\t\theight: useContentHeight ? contentHeight : containerHeight,\r\n\t};\r\n\r\n\t// We want to render our custom input when the user has pressed\r\n\t// the camera button (`inputMethod === INPUT_METHOD.CUSTOM`), so\r\n\t// long as the keyboard isn't currently appearing (which would\r\n\t// mean the input field has received focus, but we haven't updated\r\n\t// the `inputMethod` yet).\r\n\tconst showCustomInput =\r\n\t\tinputMethod === INPUT_METHOD.CUSTOM && !keyboardWillShow;\r\n\r\n\t// the keyboard is hidden and not transitioning up\r\n\tconst keyboardIsHidden =\r\n\t\tinputMethod === INPUT_METHOD.NONE && !keyboardWillShow;\r\n\r\n\t// the keyboard is visible and transitioning down\r\n\tconst keyboardIsHiding =\r\n\t\tinputMethod === INPUT_METHOD.KEYBOARD && keyboardWillHide;\r\n\r\n\t// If `keyboardHeight` is `0`, this means a hardware keyboard is\r\n\t// connected to the device. We still want to show our custom image\r\n\t// picker when a hardware keyboard is connected, so let's set\r\n\t// `keyboardHeight` to `250` in this case.\r\n\tconst inputStyle = {\r\n\t\theight: showCustomInput ? keyboardHeight || 250 : 0,\r\n\r\n\t\t// show extra space if the device is an iPhone X\r\n\t\t// and the keyboard is not showing\r\n\t\tmarginTop: isIphoneX() && (keyboardIsHidden || keyboardIsHiding),\r\n\t};\r\n\r\n\treturn (\r\n\t\t<View style={containerStyle}>\r\n\t\t\t{children}\r\n\t\t\t<View style={inputStyle}>{renderInputMethodEditor()}</View>\r\n\t\t</View>\r\n\t);\r\n};\r\n\r\nMessagingContainer.propTypes = {\r\n\tcontainerHeight: PropTypes.number.isRequired,\r\n\tcontentHeight: PropTypes.number.isRequired,\r\n\tkeyboardHeight: PropTypes.number.isRequired,\r\n\tkeyboardVisible: PropTypes.bool.isRequired,\r\n\tkeyboardWillShow: PropTypes.bool.isRequired,\r\n\tkeyboardWillHide: PropTypes.bool.isRequired,\r\n\tkeyboardAnimationDuration: PropTypes.number.isRequired,\r\n\tinputMethod: PropTypes.oneOf(Object.values(INPUT_METHOD)).isRequired,\r\n\tonChangeInputMethod: PropTypes.func,\r\n\tchildren: PropTypes.node,\r\n\trenderInputMethodEditor: PropTypes.func.isRequired,\r\n};\r\n\r\nMessagingContainer.defaultProps = {\r\n\tchildren: null,\r\n\tonChangeInputMethod: () => { },\r\n};\r\n\r\nMessagingContainer.displayName = 'MessagingContainer';\r\n\r\nexport default MessagingContainer;"]},"metadata":{},"sourceType":"module"}