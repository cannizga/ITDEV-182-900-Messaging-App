{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\joeac\\\\source\\\\repos\\\\messaging\\\\src\\\\components\\\\Status.js\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport Constants from 'expo-constants';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport NetInfo from '@react-native-community/netinfo';\n\nvar Status = function Status() {\n  var _useState = useState(true),\n      _useState2 = _slicedToArray(_useState, 2),\n      connected = _useState2[0],\n      setConnected = _useState2[1];\n\n  var backgroundColor = connected ? 'white' : 'red';\n\n  var handleChange = function handleChange(_ref) {\n    var isConnected = _ref.isConnected;\n    setConnected(isConnected);\n  };\n\n  useEffect(function () {\n    var subscription = NetInfo.addEventListener(handleChange);\n\n    (function _callee() {\n      var _await$NetInfo$fetch, isConnected;\n\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(NetInfo.fetch());\n\n            case 2:\n              _await$NetInfo$fetch = _context.sent;\n              isConnected = _await$NetInfo$fetch.isConnected;\n              setConnected(isConnected);\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    })();\n\n    return function () {\n      subscription();\n    };\n  }, []);\n  var statusBar = React.createElement(StatusBar, {\n    backgroundColor: backgroundColor,\n    barStyle: connected ? 'dark-content' : 'light-content',\n    animated: false,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 3\n    }\n  });\n  var messageContainer = React.createElement(View, {\n    style: styles.messageContainer,\n    pointerEvents: 'none',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 3\n    }\n  }, statusBar, !connected && React.createElement(View, {\n    style: styles.bubble,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 5\n    }\n  }, React.createElement(Text, {\n    style: styles.text,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 6\n    }\n  }, \"No network connection\")));\n\n  if (Platform.OS === 'ios') {\n    return React.createElement(View, {\n      style: [styles.status, {\n        backgroundColor: backgroundColor\n      }],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 4\n      }\n    }, messageContainer);\n  }\n\n  return null;\n};\n\nvar statusHeight = Platform.OS === 'ios' ? Constants.statusBarHeight : 0;\nStatus.displayName = 'Status';\nexport default Status;\nvar styles = StyleSheet.create({\n  status: {\n    zIndex: 1,\n    height: statusHeight\n  },\n  messageContainer: {\n    zIndex: 1,\n    position: 'absolute',\n    top: statusHeight + 20,\n    right: 0,\n    left: 0,\n    height: 80,\n    alignItems: 'center'\n  },\n  bubble: {\n    paddingHorizontal: 20,\n    paddingVertical: 10,\n    borderRadius: 20,\n    backgroundColor: 'red'\n  },\n  text: {\n    color: 'white'\n  }\n});","map":{"version":3,"sources":["C:/Users/joeac/source/repos/messaging/src/components/Status.js"],"names":["React","useState","useEffect","PropTypes","Constants","NetInfo","Status","connected","setConnected","backgroundColor","handleChange","isConnected","subscription","addEventListener","fetch","statusBar","messageContainer","styles","bubble","text","Platform","OS","status","statusHeight","statusBarHeight","displayName","StyleSheet","create","zIndex","height","position","top","right","left","alignItems","paddingHorizontal","paddingVertical","borderRadius","color"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Constants from 'expo-constants';\r\nimport { StyleSheet, Platform, StatusBar, Text, View } from 'react-native';\r\nimport NetInfo from '@react-native-community/netinfo';\r\n\r\nconst Status = () => {\r\n\tconst [connected, setConnected] = useState(true);\r\n\tconst backgroundColor = connected ? 'white' : 'red';\r\n\r\n\tconst handleChange = ({ isConnected }) => {\r\n\t\tsetConnected(isConnected);\r\n\t};\r\n\r\n\tuseEffect(() => {\r\n\t\tlet subscription = NetInfo.addEventListener(handleChange);\r\n\r\n\t\t(async () => {\r\n\t\t\tconst { isConnected } = await NetInfo.fetch();\r\n\t\t\tsetConnected(isConnected);\r\n\t\t})();\r\n\r\n\t\treturn () => {\r\n\t\t\tsubscription();\r\n\t\t};\r\n\t}, []);\r\n\r\n\tconst statusBar = (\r\n\t\t<StatusBar\r\n\t\t\tbackgroundColor={backgroundColor}\r\n\t\t\tbarStyle={connected ? 'dark-content' : 'light-content'}\r\n\t\t\tanimated={false}\r\n\t\t/>\r\n\t);\r\n\r\n\tconst messageContainer = (\r\n\t\t<View style={styles.messageContainer} pointerEvents={'none'}>\r\n\t\t\t{statusBar}\r\n\t\t\t{!connected && (\r\n\t\t\t\t<View style={styles.bubble}>\r\n\t\t\t\t\t<Text style={styles.text}>No network connection</Text>\r\n\t\t\t\t</View>\r\n\t\t\t)}\r\n\t\t</View>\r\n\t);\r\n\r\n\tif (Platform.OS === 'ios') {\r\n\t\treturn (\r\n\t\t\t<View style={[styles.status, { backgroundColor }]}>\r\n\t\t\t\t{messageContainer}\r\n\t\t\t</View>\r\n\t\t);\r\n\t}\r\n\r\n\treturn null;\r\n};\r\n\r\nconst statusHeight = Platform.OS === 'ios' ? Constants.statusBarHeight : 0;\r\n\r\nStatus.displayName = 'Status';\r\n\r\nexport default Status;\r\n\r\nconst styles = StyleSheet.create({\r\n\tstatus: {\r\n\t\tzIndex: 1,\r\n\t\theight: statusHeight,\r\n\t},\r\n\tmessageContainer: {\r\n\t\tzIndex: 1,\r\n\t\tposition: 'absolute',\r\n\t\ttop: statusHeight + 20,\r\n\t\tright: 0,\r\n\t\tleft: 0,\r\n\t\theight: 80,\r\n\t\talignItems: 'center',\r\n\t},\r\n\tbubble: {\r\n\t\tpaddingHorizontal: 20,\r\n\t\tpaddingVertical: 10,\r\n\t\tborderRadius: 20,\r\n\t\tbackgroundColor: 'red',\r\n\t},\r\n\ttext: {\r\n\t\tcolor: 'white',\r\n\t},\r\n});"]},"metadata":{},"sourceType":"module"}