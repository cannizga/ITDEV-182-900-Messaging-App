{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\joeac\\\\source\\\\repos\\\\messaging\\\\src\\\\components\\\\Toolbar.js\";\nimport React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport View from \"react-native-web/dist/exports/View\";\n\nvar ToolbarButton = function ToolbarButton(_ref) {\n  var title = _ref.title,\n      onPress = _ref.onPress;\n  return React.createElement(TouchableOpacity, {\n    style: styles.button,\n    onPress: onPress,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 2\n    }\n  }, React.createElement(Text, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 3\n    }\n  }, title));\n};\n\nToolbarButton.propTypes = {\n  title: PropTypes.string.isRequired,\n  onPress: PropTypes.func.isRequired\n};\n\nvar Toolbar = function Toolbar(_ref2) {\n  var isFocused = _ref2.isFocused,\n      onChangeFocus = _ref2.onChangeFocus,\n      onSubmit = _ref2.onSubmit,\n      onPressCamera = _ref2.onPressCamera,\n      onPressLocation = _ref2.onPressLocation;\n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      text = _useState2[0],\n      setText = _useState2[1];\n\n  var input = null;\n\n  var setInputRef = function setInputRef(ref) {\n    input = ref;\n  };\n\n  useEffect(function () {\n    if (isFocused) {\n      input.focus();\n    } else {\n      input.blur();\n    }\n  }, [isFocused]);\n\n  var handleFocus = function handleFocus() {\n    onChangeFocus(true);\n  };\n\n  var handleBlur = function handleBlur() {\n    onChangeFocus(false);\n  };\n\n  var handleChangeText = function handleChangeText(text) {\n    setText(text);\n  };\n\n  var handleSubmitEditing = function handleSubmitEditing() {\n    if (!text) {\n      return;\n    }\n\n    onSubmit(text);\n    setText('');\n  };\n\n  return React.createElement(View, {\n    style: styles.toolbar,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 3\n    }\n  }, React.createElement(ToolbarButton, {\n    title: '📷',\n    onPress: onPressCamera,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 4\n    }\n  }), React.createElement(ToolbarButton, {\n    title: '📍',\n    onPress: onPressLocation,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 4\n    }\n  }), React.createElement(View, {\n    style: styles.inputContainer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 4\n    }\n  }, React.createElement(TextInput, {\n    style: styles.input,\n    underlineColorAndroid: 'transparent',\n    placeholder: 'Type something!',\n    blurOnSubmit: false,\n    value: text,\n    onChangeText: handleChangeText,\n    onSubmitEditing: handleSubmitEditing,\n    ref: setInputRef,\n    onFocus: handleFocus,\n    onBlur: handleBlur,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 5\n    }\n  })));\n};\n\nToolbar.propTypes = {\n  isFocused: PropTypes.bool.isRequired,\n  onChangeFocus: PropTypes.func,\n  onSubmit: PropTypes.func,\n  onPressCamera: PropTypes.func,\n  onPressLocation: PropTypes.func\n};\nToolbar.defaultProps = {\n  onChangeFocus: function onChangeFocus() {},\n  onSubmit: function onSubmit() {},\n  onPressCamera: function onPressCamera() {},\n  onPressLocation: function onPressLocation() {}\n};\nToolbar.displayName = 'Toolbar';\nexport default Toolbar;\nvar styles = StyleSheet.create({\n  toolbar: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingVertical: 10,\n    paddingHorizontal: 10,\n    paddingLeft: 16,\n    paddingBottom: 15,\n    backgroundColor: 'rebeccapurple'\n  },\n  button: {\n    top: -2,\n    marginRight: 12,\n    fontSize: 20,\n    color: 'grey',\n    borderWidth: 2,\n    borderColor: 'lightgrey',\n    borderRadius: 5,\n    marginTop: 2,\n    padding: 6\n  },\n  inputContainer: {\n    flex: 1,\n    flexDirection: 'row',\n    borderWidth: 1,\n    borderColor: 'rgba(0,0,0,0.04)',\n    borderRadius: 16,\n    paddingVertical: 4,\n    paddingHorizontal: 12,\n    backgroundColor: 'white'\n  },\n  input: {\n    flex: 1,\n    fontSize: 18,\n    backgroundColor: 'white'\n  }\n});","map":{"version":3,"sources":["C:/Users/joeac/source/repos/messaging/src/components/Toolbar.js"],"names":["React","useState","useEffect","PropTypes","ToolbarButton","title","onPress","styles","button","propTypes","string","isRequired","func","Toolbar","isFocused","onChangeFocus","onSubmit","onPressCamera","onPressLocation","text","setText","input","setInputRef","ref","focus","blur","handleFocus","handleBlur","handleChangeText","handleSubmitEditing","toolbar","inputContainer","bool","defaultProps","displayName","StyleSheet","create","flexDirection","alignItems","paddingVertical","paddingHorizontal","paddingLeft","paddingBottom","backgroundColor","top","marginRight","fontSize","color","borderWidth","borderColor","borderRadius","marginTop","padding","flex"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {\r\n\tStyleSheet,\r\n\tText,\r\n\tTextInput,\r\n\tTouchableOpacity,\r\n\tView,\r\n} from 'react-native';\r\n\r\nconst ToolbarButton = ({ title, onPress }) => (\r\n\t<TouchableOpacity style={styles.button} onPress={onPress}>\r\n\t\t<Text>{title}</Text>\r\n\t</TouchableOpacity>\r\n);\r\n\r\nToolbarButton.propTypes = {\r\n\ttitle: PropTypes.string.isRequired,\r\n\tonPress: PropTypes.func.isRequired,\r\n};\r\n\r\nconst Toolbar = ({\r\n\tisFocused,\r\n\tonChangeFocus,\r\n\tonSubmit,\r\n\tonPressCamera,\r\n\tonPressLocation,\r\n}) => {\r\n\tconst [text, setText] = useState('');\r\n\tlet input = null;\r\n\r\n\tconst setInputRef = (ref) => {\r\n\t\tinput = ref;\r\n\t};\r\n\r\n\tuseEffect(() => {\r\n\t\tif (isFocused) {\r\n\t\t\tinput.focus();\r\n\t\t} else {\r\n\t\t\tinput.blur();\r\n\t\t}\r\n\t}, [isFocused]);\r\n\r\n\tconst handleFocus = () => {\r\n\t\tonChangeFocus(true);\r\n\t};\r\n\r\n\tconst handleBlur = () => {\r\n\t\tonChangeFocus(false);\r\n\t};\r\n\r\n\tconst handleChangeText = (text) => {\r\n\t\tsetText(text);\r\n\t};\r\n\r\n\tconst handleSubmitEditing = () => {\r\n\t\tif (!text) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tonSubmit(text);\r\n\t\tsetText('');\r\n\t};\r\n\r\n\treturn (\r\n\t\t<View style={styles.toolbar}>\r\n\t\t\t<ToolbarButton title={'📷'} onPress={onPressCamera} />\r\n\t\t\t<ToolbarButton title={'📍'} onPress={onPressLocation} />\r\n\t\t\t<View style={styles.inputContainer}>\r\n\t\t\t\t<TextInput\r\n\t\t\t\t\tstyle={styles.input}\r\n\t\t\t\t\tunderlineColorAndroid={'transparent'}\r\n\t\t\t\t\tplaceholder={'Type something!'}\r\n\t\t\t\t\tblurOnSubmit={false}\r\n\t\t\t\t\tvalue={text}\r\n\t\t\t\t\tonChangeText={handleChangeText}\r\n\t\t\t\t\tonSubmitEditing={handleSubmitEditing}\r\n\t\t\t\t\tref={setInputRef}\r\n\t\t\t\t\tonFocus={handleFocus}\r\n\t\t\t\t\tonBlur={handleBlur}\r\n\t\t\t\t/>\r\n\t\t\t</View>\r\n\t\t</View>\r\n\t);\r\n};\r\n\r\nToolbar.propTypes = {\r\n\tisFocused: PropTypes.bool.isRequired,\r\n\tonChangeFocus: PropTypes.func,\r\n\tonSubmit: PropTypes.func,\r\n\tonPressCamera: PropTypes.func,\r\n\tonPressLocation: PropTypes.func,\r\n};\r\n\r\nToolbar.defaultProps = {\r\n\tonChangeFocus: () => { },\r\n\tonSubmit: () => { },\r\n\tonPressCamera: () => { },\r\n\tonPressLocation: () => { },\r\n};\r\n\r\nToolbar.displayName = 'Toolbar';\r\n\r\nexport default Toolbar;\r\n\r\nconst styles = StyleSheet.create({\r\n\ttoolbar: {\r\n\t\tflexDirection: 'row',\r\n\t\talignItems: 'center',\r\n\t\tpaddingVertical: 10,\r\n\t\tpaddingHorizontal: 10,\r\n\t\tpaddingLeft: 16,\r\n\t\tpaddingBottom: 15,\r\n\t\tbackgroundColor: 'rebeccapurple',\r\n\t},\r\n\tbutton: {\r\n\t\ttop: -2,\r\n\t\tmarginRight: 12,\r\n\t\tfontSize: 20,\r\n\t\tcolor: 'grey',\r\n\t\tborderWidth: 2,\r\n\t\tborderColor: 'lightgrey',\r\n\t\tborderRadius: 5,\r\n\t\tmarginTop: 2,\r\n\t\tpadding: 6,\r\n\t},\r\n\tinputContainer: {\r\n\t\tflex: 1,\r\n\t\tflexDirection: 'row',\r\n\t\tborderWidth: 1,\r\n\t\tborderColor: 'rgba(0,0,0,0.04)',\r\n\t\tborderRadius: 16,\r\n\t\tpaddingVertical: 4,\r\n\t\tpaddingHorizontal: 12,\r\n\t\tbackgroundColor: 'white',\r\n\t},\r\n\tinput: {\r\n\t\tflex: 1,\r\n\t\tfontSize: 18,\r\n\t\tbackgroundColor: 'white',\r\n\t},\r\n});"]},"metadata":{},"sourceType":"module"}