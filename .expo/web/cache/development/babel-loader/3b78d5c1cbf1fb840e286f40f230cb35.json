{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport * as MediaLibrary from 'expo-media-library';\nvar ASSET_TYPE_TO_MEDIA_TYPE = {\n  Photos: MediaLibrary.MediaType.photo,\n  Videos: MediaLibrary.MediaType.video\n};\nexport default {\n  _store: {},\n  getPhotos: function getPhotos(params) {\n    var _this = this;\n\n    var mediaLibraryParams, results, transformedResults;\n    return _regeneratorRuntime.async(function getPhotos$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            mediaLibraryParams = {\n              first: params.first,\n              after: params.after,\n              mediaType: ASSET_TYPE_TO_MEDIA_TYPE[params.assetType] || params.assetType\n            };\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(MediaLibrary.getAssetsAsync(mediaLibraryParams));\n\n          case 3:\n            results = _context.sent;\n            results.assets.forEach(function (asset) {\n              _this._store[asset.uri] = asset;\n            });\n            transformedResults = {\n              edges: results.assets.map(function (asset) {\n                return {\n                  node: {\n                    type: asset.mediaType,\n                    image: {\n                      filename: asset.filename,\n                      uri: asset.uri,\n                      height: asset.height,\n                      width: asset.width,\n                      playableDuration: asset.duration\n                    },\n                    timestamp: asset.modificationTime,\n                    location: null\n                  }\n                };\n              }),\n              page_info: {\n                has_next_page: results.hasNextPage,\n                start_cursor: null,\n                end_cursor: results.endCursor\n              }\n            };\n            return _context.abrupt(\"return\", transformedResults);\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  },\n  deletePhotos: function deletePhotos(photoUris) {\n    var _this2 = this;\n\n    var assets, ok;\n    return _regeneratorRuntime.async(function deletePhotos$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            assets = photoUris.map(function (uri) {\n              return _this2._store[uri];\n            }).filter(function (x) {\n              return !!x;\n            });\n            _context2.next = 3;\n            return _regeneratorRuntime.awrap(MediaLibrary.deleteAssetsAsync(assets));\n\n          case 3:\n            ok = _context2.sent;\n\n            if (ok) {\n              photoUris.forEach(function (uri) {\n                delete _this2._store[uri];\n              });\n            }\n\n          case 5:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  },\n  save: function save(tag) {\n    var options,\n        asset,\n        _args3 = arguments;\n    return _regeneratorRuntime.async(function save$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            options = _args3.length > 1 && _args3[1] !== undefined ? _args3[1] : {};\n            _context3.next = 3;\n            return _regeneratorRuntime.awrap(MediaLibrary.createAssetAsync(tag));\n\n          case 3:\n            asset = _context3.sent;\n\n            if (!options.album) {\n              _context3.next = 7;\n              break;\n            }\n\n            _context3.next = 7;\n            return _regeneratorRuntime.awrap(MediaLibrary.addAssetsToAlbumAsync([asset], options.album, false));\n\n          case 7:\n            return _context3.abrupt(\"return\", asset.uri);\n\n          case 8:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  },\n  saveToCameraRoll: function saveToCameraRoll(tag, type) {\n    return _regeneratorRuntime.async(function saveToCameraRoll$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            return _context4.abrupt(\"return\", this.save(tag, {\n              type: type\n            }));\n\n          case 1:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, null, this, null, Promise);\n  }\n};","map":{"version":3,"sources":["C:/Users/joeac/source/repos/messaging/node_modules/expo-cameraroll/index.js"],"names":["MediaLibrary","ASSET_TYPE_TO_MEDIA_TYPE","Photos","MediaType","photo","Videos","video","_store","getPhotos","params","mediaLibraryParams","first","after","mediaType","assetType","getAssetsAsync","results","assets","forEach","asset","uri","transformedResults","edges","map","node","type","image","filename","height","width","playableDuration","duration","timestamp","modificationTime","location","page_info","has_next_page","hasNextPage","start_cursor","end_cursor","endCursor","deletePhotos","photoUris","filter","x","deleteAssetsAsync","ok","save","tag","options","createAssetAsync","album","addAssetsToAlbumAsync","saveToCameraRoll"],"mappings":"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","sourcesContent":["import * as MediaLibrary from 'expo-media-library'\n\nconst ASSET_TYPE_TO_MEDIA_TYPE = {\n  Photos: MediaLibrary.MediaType.photo,\n  Videos: MediaLibrary.MediaType.video,\n}\n\n/**\n * `CameraRoll` provides access to the local camera roll or photo library.\n *\n * See https://facebook.github.io/react-native/docs/cameraroll.html\n */\nexport default {\n  /**\n   * Holds a mapping from local file uri to MediaLibrary Asset\n   */\n  _store: {},\n\n  /**\n   * Returns a Promise with photo identifier objects from the local camera\n   * roll of the device matching shape defined by `getPhotosReturnChecker`.\n   *\n   * See https://reactnative.dev/docs/cameraroll.html#getphotos\n   */\n  async getPhotos(params) {\n    const mediaLibraryParams = {\n      first: params.first,\n      after: params.after,\n      mediaType: ASSET_TYPE_TO_MEDIA_TYPE[params.assetType] || params.assetType,\n    }\n\n    const results = await MediaLibrary.getAssetsAsync(mediaLibraryParams)\n\n    results.assets.forEach((asset) => {\n      this._store[asset.uri] = asset\n    })\n\n    const transformedResults = {\n      edges: results.assets.map((asset) => ({\n        node: {\n          type: asset.mediaType,\n          image: {\n            filename: asset.filename,\n            uri: asset.uri,\n            height: asset.height,\n            width: asset.width,\n            playableDuration: asset.duration,\n          },\n          timestamp: asset.modificationTime,\n          location: null,\n        },\n      })),\n      page_info: {\n        has_next_page: results.hasNextPage,\n        start_cursor: null,\n        end_cursor: results.endCursor,\n      },\n    }\n\n    return transformedResults\n  },\n\n  /**\n   * On iOS: requests deletion of a set of photos from the camera roll.\n   * On Android: Deletes a set of photos from the camera roll.\n   */\n  async deletePhotos(photoUris) {\n    const assets = photoUris.map((uri) => this._store[uri]).filter((x) => !!x)\n\n    const ok = await MediaLibrary.deleteAssetsAsync(assets)\n\n    if (ok) {\n      photoUris.forEach((uri) => {\n        delete this._store[uri]\n      })\n    }\n  },\n\n  /**\n   * Saves the photo or video to the camera roll or photo library.\n   */\n  async save(tag, options = {}) {\n    const asset = await MediaLibrary.createAssetAsync(tag)\n\n    if (options.album) {\n      await MediaLibrary.addAssetsToAlbumAsync([asset], options.album, false)\n    }\n\n    return asset.uri\n  },\n\n  /**\n   * Saves the photo or video to the camera roll or photo library.\n   */\n  async saveToCameraRoll(tag, type) {\n    return this.save(tag, { type })\n  },\n}\n"]},"metadata":{},"sourceType":"module"}